# C++ 함수 연장선 & 메모리 요약 정리

## 1. 오늘 배운 내용 요약

### 함수 연장선
- 함수가 호출되면 스택(Stack) 메모리에 지역변수와 매개변수 등이 할당됨
- 함수 종료 시, 사용한 메모리는 자동으로 반환됨
- void 함수, return 있는 함수 모두 호출 종료 시점에서 메모리 반환

### 메모리 영역
- **스택(Stack)**: 지역 변수, 함수 호출 시 임시로 할당
- **힙(Heap)**: `new` 연산자로 동적 할당, 필요 시 메모리 직접 해제(`delete`) 필요
- 포인터(`int* p`)를 사용하여 힙 영역의 메모리를 가리킴

> 힙 사용 시점: 실행 중 크기가 동적으로 결정되는 배열, 객체 등
> 해제 시점: 필요 없을 때 바로 `delete`로 메모리 반환

### cin 사용
- `std::cin`은 사용자 입력을 받을 때 사용
- 변수 선언만 해도 입력 가능: `int a; std::cin >> a;`
- 출력과 입력 연산자 방향:
  - `std::cout << "문자열"` : 출력
  - `std::cin >> 변수` : 입력

---

## 2. 오늘 문제풀이 정리

### 문제: 정수 범위 입력 후 조건별 연산

```cpp
#include <iostream>
#include <iomanip>

void RangeStats(int start, int end)
{
    int a = 0;  // 3의 배수 개수
    int b = 0;  // 5의 배수 합
    int c = 0;  // 7의 배수이면서 홀수 개수

    while (start <= end)
    {
        if (start % 3 == 0)
            ++a;
        if (start % 5 == 0)
            b += start;
        if (start % 7 == 0 && start % 2 == 1)
            ++c;

        ++start; // 증감 연산 필수
    }

    std::cout << "3의 배수 개수: " << a << '\n';
    std::cout << "5의 배수 합: " << b << '\n';
    std::cout << "7의 배수이면서 홀수 개수: " << c << '\n';
}

int main()
{
    int a, b;

    std::cout << "정수를 입력하세요: ";
    std::cin >> a;

    std::cout << "정수를 입력하세요: ";
    std::cin >> b;

    RangeStats(a, b);

    return 0;
}
```

---

## 3. 오늘 정리해두면 좋은 핵심 포인트

1. **while/for 반복문**
   - 반복문 내부에서 계산만 하고, 최종 출력은 반복문 밖에서
   - 반복문 안에서 `break`나 조건처리 가능하지만, 증감 연산자를 안쓰면 무한루프 발생

2. **함수와 메모리**
   - 함수 호출 시 스택 사용 → 종료 시 반환
   - 힙 사용 시 `new` / `delete`로 직접 관리
   - 지금 단계에서는 개념 이해만, 실제 포인터 활용은 나중 강의에서

3. **cin/cout**
   - `std::cin >> 변수` : 입력
   - `std::cout << 값 << '\n'` : 출력
   - `<<`와 `>>`는 방향이 반대 → 흐름 방향으로 이해
   - 변수와 문자열 결합 시 항상 `<<` 연결

4. **정리 습관**
   - 함수 연장선 이해
   - 반복문과 조건문 패턴 숙달
   - 입력(cin)과 출력(cout) 패턴 연습
